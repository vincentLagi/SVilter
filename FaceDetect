import cv2
import cv2.data
import time
import os
# Load Haar Cascade classifiers
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
smile_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_smile.xml')

# Start video capture
cap = cv2.VideoCapture(0)  # Use 0 for the default camera

smile_start_time = None  # To track when a smile is first detected
screenshot_taken_time = None  # To track when the last screenshot was taken

while True:
    # Capture frame-by-frame
    ret, frame = cap.read()
    if not ret:
        break

    # Convert to grayscale for better detection
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Detect faces
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5)

    for (x, y, w, h) in faces:
        # Determine rectangle color based on cooldown
        if screenshot_taken_time and time.time() - screenshot_taken_time < 3:
            rectangle_color = (0, 0, 255)  # Red during cooldown
        else:
            rectangle_color = (255, 0, 0)  # Blue otherwise

        # Region of interest for smile detection
        roi_gray = gray[y:y+h, x:x+w]
        roi_color = frame[y:y+h, x:x+w]

        # Detect smiles
        smiles = smile_cascade.detectMultiScale(roi_gray, scaleFactor=1.8, minNeighbors=35)

        if len(smiles) > 0 and (not screenshot_taken_time or time.time() - screenshot_taken_time >= 3):
            rectangle_color = (0, 255, 0)
            if smile_start_time is None:  # Start timer when smile is detected
                smile_start_time = time.time()

            # Check duration of smile
            smile_duration = time.time() - smile_start_time

            if smile_duration >= 3:
                # Save screenshot without drawing rectangles
                cv2.imwrite('screenshot.png', frame)
                print("Screenshot saved as 'screenshot.png'")
                screenshot_taken_time = time.time()  # Set the time when screenshot was taken
                smile_start_time = None  # Reset smile timer
        else:
            # Reset the timer if no smile is detected
            smile_start_time = None

        # Draw the rectangle with the updated color
        cv2.rectangle(frame, (x, y), (x+w, y+h), rectangle_color, 2)

    # Display the resulting frame
    cv2.imshow('Smile Detector', frame)

    # Break loop with 'q' key
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the capture and close the windows
cap.release()
cv2.destroyAllWindows()
